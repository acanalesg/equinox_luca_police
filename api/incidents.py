import json
import random
import logging
import sqlite3 as lite
import googlemaps
from datetime import datetime
from shapely.geometry import box, Point
import ConfigParser


radius = 100

class Planner:
    query = 'select code, lat, lon, day, state from cars'

    def __init__(self):
        try:
            Config = ConfigParser.ConfigParser()
            Config.read('api.cfg')

            dbpath = Config.get('database', 'path')
            logging.info("Connecting to database: " + dbpath)

            #self.con = lite.connect('/data/hertz/luca_police.db')
            self.con = lite.connect(dbpath, check_same_thread=False)

            self.cur = self.con.cursor()
            self.gmaps = googlemaps.Client(key='AIzaSyCMAwkSlK0hAKY_B-FO53XGBIdElyvGaJE')

        except:
            logging.error("Couldnt find database")


    def get_positions_list(self):
        # Returns [[code, lat, long, day, state]]
        result = self.cur.execute(self.query)

        a = []
        for r in result:
            a.append(r)

        return a



    def calculate_distance(self, positions, lat_dest, lon_dest):
        car_latlons = []
        #print type(positions)
        #print positions

        for (code, lat, lon, dt, state) in positions:
            logging.info("Incluying latlong: " + str((lat,lon)))
            car_latlons.append((lat,lon))

        distances = self.gmaps.distance_matrix(car_latlons, (lat_dest,lon_dest),
                                          mode='driving',
                                          departure_time=datetime.now())

        return_distances = []

        for (i, (code, lat, lon, dt, state)) in enumerate(positions):
            return_distances.append( (i, code, lat, lon, dt, state
                   , distances['rows'][i]['elements'][0]['duration']['value']
                   , distances['rows'][i]['elements'][0]['duration']['text']
                   , distances['rows'][i]['elements'][0]['distance']['value']
                   , distances['rows'][i]['elements'][0]['distance']['text'] ) )

        return sorted(return_distances, key=lambda x: x[6])


    def calculate_coverage(self, distances):
        # distances format: code, lat, lon, dt, state, time_value, time_text, dist_value, dist_text
        # Para cada vehiculo calculo la cobertura sobre el bounding box del DF
        bbox = box(-99.3573, -98.9433, 19.5927, 19.1322)

        circles = []
        for c in distances:
            # print c
            circles.append(Point(float(c[3]), float(c[2])).buffer(radius))

        coverages = []
        # Need to improve this
        for i in range(len(circles)):
            circle_union = None
            for j in range(len(circles)):
                if i == j:
                    continue
                if not circle_union:
                    circle_union = circles[j]
                else:
                    circle_union = circle_union.union(circles[j])
            coverages.append(round((bbox.area - bbox.difference(circle_union).area)/bbox.area,5))

        new_distances = []
        for (i, c) in enumerate(distances):
            new_distances.append(c + (coverages[i],))

        return new_distances









    def simulate_incident(self, lat, lon):

        car_positions = self.get_positions_list()
        #print lat
        #print lon

        mock = True

        if not mock:
            car_distances = self.calculate_distance(car_positions, float(lat), float(lon))
            car_distances = self.calculate_coverage(car_distances)
        else:
            car_distances = [[28,"b48",19.5283451,-99.0771179,"2016-12-15 16:30:03.127",0,738,"12 mins",5664,"5.7 km",0.5629],[8,"b3",19.5123959,-99.080986,"2017-01-02 22:40:24.063",0,1126,"19 mins",8278,"8.3 km",0.5629],[57,"b39",19.4974728,-99.0446854,"2016-12-15 16:56:17",0,1713,"29 mins",13858,"13.9 km",0.5629],[47,"b28",19.4424057,-99.0836487,"2016-12-15 16:51:55.063",0,2177,"36 mins",18097,"18.1 km",0.5629],[44,"b49",19.4403839,-99.0767899,"2016-12-15 16:49:28.063",0,2208,"37 mins",19231,"19.2 km",0.5629],[9,"b5D",19.4403076,-99.076355,"2017-01-02 22:52:28.063",0,2219,"37 mins",19276,"19.3 km",0.5629],[11,"b72",19.4402561,-99.0762787,"2017-01-02 22:57:47.063",0,2221,"37 mins",19287,"19.3 km",0.5629],[19,"b1A",19.4352646,-99.085289,"2016-12-16 08:57:35.063",0,2221,"37 mins",18854,"18.9 km",0.5629],[37,"b16",19.4402046,-99.0761185,"2016-12-15 16:39:39.063",0,2226,"37 mins",19305,"19.3 km",0.5629],[20,"b41",19.4403839,-99.0758896,"2016-12-16 09:01:48.063",0,2232,"37 mins",19332,"19.3 km",0.5629],[48,"b3F",19.4403591,-99.0758896,"2016-12-15 16:52:36.063",0,2232,"37 mins",19332,"19.3 km",0.5629],[49,"b2D",19.4403591,-99.0759659,"2016-12-15 16:53:02.063",0,2232,"37 mins",19332,"19.3 km",0.5629],[39,"b4E",19.5995388,-99.1907806,"2016-12-15 16:41:51.063",0,2434,"41 mins",40952,"41.0 km",0.5629],[10,"b5A",19.4245129,-99.0896149,"2017-01-02 22:54:01.063",0,2444,"41 mins",21203,"21.2 km",0.5629],[43,"b15",19.4202366,-99.0775299,"2016-12-15 16:45:56.063",0,2484,"41 mins",21837,"21.8 km",0.5629],[55,"b8",19.4588413,-99.1578369,"2016-12-15 16:56:14",0,2488,"41 mins",20132,"20.1 km",0.5629],[14,"b2C",19.4203396,-99.0755844,"2016-12-16 05:44:23.063",0,2510,"42 mins",22040,"22.0 km",0.5629],[46,"b35",19.4202366,-99.0752258,"2016-12-15 16:50:36.063",0,2518,"42 mins",22075,"22.1 km",0.5629],[23,"b5C",19.4202118,-99.0751266,"2016-12-15 16:26:09.063",0,2519,"42 mins",22078,"22.1 km",0.5629],[25,"bA",19.420084,-99.0752487,"2016-12-15 16:27:54.063",0,2519,"42 mins",22078,"22.1 km",0.5629],[35,"b34",19.4201088,-99.0751724,"2016-12-15 16:38:53.063",0,2519,"42 mins",22078,"22.1 km",0.5629],[41,"b20",19.4202118,-99.0752258,"2016-12-15 16:43:39.063",0,2519,"42 mins",22078,"22.1 km",0.5629],[40,"b10",19.4402313,-99.0757599,"2016-12-15 16:43:37.063",0,2521,"42 mins",19525,"19.5 km",0.5629],[50,"b3D",19.4221058,-99.0742493,"2016-12-15 16:55:28",0,2540,"42 mins",22272,"22.3 km",0.5629],[32,"b42",19.5439873,-99.2055817,"2016-12-15 16:36:19.063",0,2564,"43 mins",27030,"27.0 km",0.5629],[56,"b47",19.4587383,-99.1631393,"2016-12-15 16:56:15",0,2624,"44 mins",22235,"22.2 km",0.5629],[52,"b12",19.4350853,-99.2118301,"2016-12-15 16:56:07",0,2688,"45 mins",32079,"32.1 km",0.5629],[27,"bD",19.5495167,-99.2071457,"2016-12-15 16:28:58.063",0,2715,"45 mins",45532,"45.5 km",0.5629],[24,"b2F",19.4281464,-99.1791382,"2016-12-15 16:27:39.063",0,2855,"48 mins",24425,"24.4 km",0.5629],[29,"b40",19.5176449,-99.2632828,"2016-12-15 16:30:11.063",0,2876,"48 mins",53364,"53.4 km",0.5629],[2,"bE",19.8527489,-99.2876282,"2016-12-28 21:19:38",0,2909,"48 mins",63805,"63.8 km",0.5629],[7,"b4B",19.8526974,-99.2876282,"2017-01-02 19:10:26",0,2909,"48 mins",63810,"63.8 km",0.5629],[0,"b18",19.8523655,-99.2872696,"2016-12-22 20:41:45",0,2911,"49 mins",63862,"63.9 km",0.5629],[1,"b46",19.8524418,-99.2872696,"2016-12-25 18:41:47",0,2911,"49 mins",63856,"63.9 km",0.5629],[17,"b1F",19.8522873,-99.2872162,"2016-12-16 08:50:35",0,2912,"49 mins",63872,"63.9 km",0.5629],[45,"b7",19.4273529,-99.1971588,"2016-12-15 16:50:03.063",0,2992,"50 mins",25691,"25.7 km",0.5629],[59,"b1E",19.3765125,-99.1267548,"2016-12-15 16:56:20",0,3079,"51 mins",31055,"31.1 km",0.5629],[51,"b26",19.3923321,-99.2388382,"2016-12-15 16:56:02",0,3114,"52 mins",31137,"31.1 km",0.5629],[60,"b19",19.4341373,-99.1750946,"2016-12-15 16:56:20",0,3153,"53 mins",23571,"23.6 km",0.5629],[6,"b31",19.3537273,-99.193367,"2017-01-02 18:23:42.063",0,3264,"54 mins",31783,"31.8 km",0.5629],[38,"b2E",19.3140736,-99.2215042,"2016-12-15 16:40:51.063",0,3361,"56 mins",39523,"39.5 km",0.5629],[13,"b43",19.3602047,-99.1724777,"2016-12-15 22:33:37.063",0,3524,"59 mins",36840,"36.8 km",0.5629],[21,"b21",19.3676281,-99.2616196,"2016-12-16 09:13:02.063",0,3564,"59 mins",35166,"35.2 km",0.5629],[26,"b2A",19.4145279,-99.1547928,"2016-12-15 16:28:14.063",0,3592,"1 hour 0 mins",23470,"23.5 km",0.5629],[16,"b1",19.3674488,-99.2613144,"2016-12-16 08:44:45.063",0,3664,"1 hour 1 min",35685,"35.7 km",0.5629],[54,"b4",19.3438473,-99.1811829,"2016-12-15 16:56:13",0,3776,"1 hour 3 mins",37181,"37.2 km",0.5629],[42,"b4C",19.3017082,-99.1188736,"2016-12-15 16:45:35.063",0,3799,"1 hour 3 mins",36609,"36.6 km",0.5629],[31,"b27",19.3176327,-99.140274,"2016-12-15 16:31:39.063",0,3852,"1 hour 4 mins",39508,"39.5 km",0.5629],[33,"bC",19.2984314,-99.1365356,"2016-12-15 16:38:00.063",0,3871,"1 hour 5 mins",39707,"39.7 km",0.5629],[58,"b4A",19.2828922,-99.2110062,"2016-12-15 16:56:18.063",0,3964,"1 hour 6 mins",42766,"42.8 km",0.5629],[22,"b1D",19.3012733,-99.1454468,"2016-12-15 15:39:04.063",0,4216,"1 hour 10 mins",34143,"34.1 km",0.5629],[36,"b32",19.3027325,-99.1749115,"2016-12-15 16:39:39.063",0,4261,"1 hour 11 mins",39771,"39.8 km",0.5629],[34,"b33",19.3611259,-99.2721634,"2016-12-15 16:38:52.127",0,4266,"1 hour 11 mins",76099,"76.1 km",0.5629],[3,"b13",19.1190529,-98.7832565,"2016-12-30 12:02:18",0,4646,"1 hour 17 mins",89510,"89.5 km",0.56265],[15,"b14",19.2869892,-99.5790558,"2016-12-16 05:48:32",0,5246,"1 hour 27 mins",108037,"108 km",0.5629],[5,"b53",19.2869625,-99.5779572,"2017-01-02 17:28:05",0,5251,"1 hour 28 mins",108152,"108 km",0.5629],[4,"b4D",19.3508606,-98.6589966,"2016-12-31 13:14:15",0,5346,"1 hour 29 mins",117546,"118 km",0.56267],[30,"b45",19.3367043,-99.5718155,"2016-12-15 16:31:11.127",0,5347,"1 hour 29 mins",109197,"109 km",0.5629],[18,"b44",19.3366776,-99.5718155,"2016-12-16 08:54:56.063",0,5348,"1 hour 29 mins",109198,"109 km",0.5629],[53,"b68",19.0535431,-99.2429047,"2016-12-15 16:56:12",0,5438,"1 hour 31 mins",77471,"77.5 km",0.5629],[12,"b11",18.986496,-99.1014175,"2017-01-02 23:09:37",0,6987,"1 hour 56 mins",103692,"104 km",0.56273]]

        return json.dumps(car_distances)

